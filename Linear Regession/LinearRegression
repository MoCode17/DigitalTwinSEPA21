import numpy as np
import matplotlib.pyplot as plt
import pandas as pa
import datetime as dt
import time
from scipy import stats
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import FunctionTransformer

pd = pa.read_csv("week_data.csv", parse_dates=True)

pd['timeIndex'] = np.arange(len(pd.index))


plt.rc("figure", autolayout=True, figsize=(11, 4))
plt.rc(
    "axes",
    labelweight="bold",
    labelsize="large",
    titleweight="bold",
    titlesize=14,
    titlepad=10,
)
plot_params = dict(
    color="0.75",
    style=".-",
    markeredgecolor="0.25",
    markerfacecolor="0.25",
    legend=False,
)

# ## Lag plot
# # fig, ax = plot.subplots()
# # ax.plot(X['Lag_1'], y, '.', color='0.25')
# # ax.plot(X['Lag_1'], y_pred)
# # #ax.set_aspect('equal')
# # ax.set_ylabel('Temperature')
# # ax.set_xlabel('Lag_1')
# # ax.set_title('Lag Plot of Temperature Readings')

# #Linear Regression plot
# ax = y.plot(**plot_params)
# ax = y_pred.plot(ax=ax, linewidth=3)
# ax.set_title('Index Plot of Temperature')
# plot.show()


#######Time
# print(y_pred)
# print(model.intercept_)
# print(model.coef_)
# pd["time"] = pa.to_datetime(pd["time"], format="%Y-%m-%d %H-%M-%S")
# pd['time'] = pd['time'].apply(lambda a: time.mktime(a.timetuple()))
# print(pd['time'])
# Linear regression
#pd['Future'] = pd['readingValue'].shift(-10)
X = pd.loc[:, ['timeIndex']]
#X.dropna(inplace=True)
y = pd.loc[:, 'readingValue']
#y, X = y.align(X, join='inner')
X_train, X_test, y_train, y_test = train_test_split(
    X,y,test_size=0.2,random_state=42
    )
model = LinearRegression()
model.fit(X_train, y_train)
print("Y- intercept: ", model.intercept_)
print("Gradient coefficient: ", model.coef_)
y_pred = pa.Series(model.predict(X), index=pd['time'])
ax = y.plot(**plot_params)
ax = y_pred.plot(ax=ax, linewidth=3)
ax.set_title('Plot of Temperature')
plt.show()


###################
#   Cyclical encoding, sin/cosine transformation
###################

X_2 = pd.copy()
X_2["time"] = pa.to_datetime(X_2["time"], format="%Y-%m-%d %H-%M-%S")
X_2['hour'] = X_2['time'].dt.hour
print(X_2['hour'])

X_2['hour_sin'] = np.sin(2 * np.pi * X_2['hour']/24.0)
X_2['hour_cos'] = np.cos(2 * np.pi * X_2['hour']/24.0)


X_2[['hour_sin', 'hour_cos']].plot()
plt.suptitle("Cyclical encoding with sine/cosine transformation")
plt.show()

X_2_daily = X_2[['hour_sin', 'hour_cos']]

model_2 = LinearRegression().fit(X_2_daily.iloc[:len(X_train)],
								 y.iloc[:len(y_train)])

y_pred_2 = pa.Series(model_2.predict(X_2_daily), index=pd['time'])
y.plot(**plot_params)
y_pred_2.plot()
plt.suptitle('Plot of Cyclic Temperature')
plt.show()