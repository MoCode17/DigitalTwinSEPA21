import numpy as np
import matplotlib.pyplot as plt
import pandas as pa
import datetime as dt
from scipy import stats
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# Load database from csv, (file currently in directory, if not specify location)
# df is of type Pandas DataFrame, this type allows easy manipulation for machine learning
df = pa.read_csv("table.csv", parse_dates=True)


###################
#   Simple Linear Regression Model for all data, y = mx + C
###################

# Create new column to index the values, for e.g. [0, 1, 2, 3, ..., n-1]
df['timeIndex'] = np.arange(len(df.index))
print("Original data frame: \n", df)

# Define our X and y
# X is simply the timeIndex, which mirrors the temperature id
X = df.loc[:, ['timeIndex']]
# y is the actual temperature values
y = df.loc[:, 'reading_value']

# A common practice in machine learning is to split the data into a training set and test set.
# This also prevents the common issue of overfitting the model
# The below assigns train and test values for X and y using a sklearn module
# test_size=0.2 assigns the ratio of test/train set, for e.g. split as 20% test data and 80% train data
# random_state is used to seed the random order, the train and test sets are split randomly, this keeps the same random order each time
X_train, X_test, y_train, y_test = train_test_split(
    X,y,test_size=0.2,random_state=42
    )

# Create the Linear Regression Model
model = LinearRegression()
# Fit the data, comparing the index over time to the temperature values
model.fit(X_train, y_train)
# Create a Pandas Series to store the prection values, this series is indexed with date/time values from the dataframe
y_pred = pa.Series(model.predict(X), index=df['reading_time'])

# Below are chart formatting parameters
plt.rc("figure", autolayout=True, figsize=(11, 4))
plt.rc(
    "axes",
    labelweight="bold",
    labelsize="large",
    titleweight="bold",
    titlesize=14,
    titlepad=10,
)
plot_params = dict(
    color="0.75",
    style=".-",
    markeredgecolor="0.25",
    markerfacecolor="0.25",
    legend=False,
)

## Plot the Linear Regression for whole dataset
# plot actual data
ax = y.plot(**plot_params)
#plot predicted
ax = y_pred.plot(ax=ax, linewidth=3)
ax.set_title('Plot of Temperature Â°C')
plt.show()

# print values for line: y = mx + c
# c: y-intercept
# m: coefficient
print("Y- intercept: ", model.intercept_)
print("Gradient coefficient: ", model.coef_)


###################
#   Cyclical encoding, sin/cosine transformation for all data
###################
# https://www.kaggle.com/code/avanwyk/encoding-cyclical-features-for-deep-learning
# https://developer.nvidia.com/blog/three-approaches-to-encoding-time-information-as-features-for-ml-models/

# New X dataframe to manipulate
X_2 = df.copy()
# Convert reading time str values to type datetime 
X_2["reading_time"] = pa.to_datetime(X_2["reading_time"], format="%Y-%m-%d %H:%M:%S")
# Create a new column, storing the current hour of the reading, [0:25]
X_2['hour'] = X_2['reading_time'].dt.hour

# Create a sin and cosine column to store the relative transformation of the reading
# Both sin and cosine are used to cycle through data
X_2['hour_sin'] = np.sin(2 * np.pi * X_2['hour']/24.0)
X_2['hour_cos'] = np.cos(2 * np.pi * X_2['hour']/24.0)

X_2[['hour_sin', 'hour_cos']].plot()
plt.suptitle("Cyclical encoding transformation using sine/cosine")
plt.show()
# Store the hourly sin and cosine data columns
X_2_daily = X_2[['hour_sin', 'hour_cos']]

###################
#   Fitting and predicting the model
###################

# Fit the data comparing sin and cosine to match the y/actual values
model_2 = LinearRegression().fit(X_2_daily.iloc[:len(X_train)],
							    y.iloc[:len(y_train)])

y_pred_2 = pa.Series(model_2.predict(X_2_daily), index=df['reading_time'])

y.plot(**plot_params)
y_pred_2.plot()

plt.suptitle('Plot of Cyclic Temperature')
plt.show()

###################
#   Monthly model Function
###################
# These two columns are used to locate data based on matching either he date, or month
X_2['date_index'] = X_2['reading_time'].dt.date
X_2['month_index'] = X_2['reading_time'].dt.month

# X_2 is now indexed with date/time values, straightforward to plot and access 
X_2.set_index('reading_time', inplace=True)

# List the current months of data readings in dataframe
print(X_2['month_index'].drop_duplicates())

def monthyPrediction(month, hour):
    # Define a new dataframe including only the specified month data
    # This is done by locating(.loc) the matching month_index data set
    new_X = X_2.loc[lambda X_2: X_2['month_index']==month]
    print("new_X: \n", new_X)

    # Use the previous sin/cosin transformation array but with the same size as new_X
    # The index size must all be equal for the model
    new_X_daily = X_2_daily[:len(new_X)]
    print("new_X_daily: \n", new_X_daily)

    # Create a new y of reading values from the current sliced dataframe
    new_y = new_X.loc[:, 'reading_value']
    print("new y: ", new_y)

    # Create the model and fit the sin/cosine values to the reading values
    model_x = LinearRegression().fit(new_X_daily, new_y)
    
    # Create a series object storing the predicted values, this is indexed with our date values from X
    y_pred_x = pa.Series(model_x.predict(new_X_daily), index=new_X.index)

    new_y.plot(**plot_params)
    y_pred_x.plot()

    plt.suptitle('Month data of Cyclic Temperature')
    plt.show()

    # How temperature is accessed from array
    print("temp on 2023-05-01: \n", y_pred_x['2023-05-01'])
    print("temp on 2023-05-01 at 2 AM: \n", y_pred_x['2023-05-01 02'])

# Model and predict the temperature using the 5th month / May
monthyPrediction(5, 0)